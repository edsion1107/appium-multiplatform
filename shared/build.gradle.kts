@file:OptIn(ExperimentalKotlinGradlePluginApi::class)

import build.buf.gradle.BUF_BUILD_DIR
import build.buf.gradle.GENERATED_DIR
import build.buf.gradle.GenerateTask
import build.buf.gradle.ImageFormat
import org.jetbrains.kotlin.gradle.ExperimentalKotlinGradlePluginApi
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    alias(libs.plugins.project.report)
    alias(libs.plugins.kotlin.multiplatform)
    alias(libs.plugins.ktx.serialization)
    alias(libs.plugins.kotest)
    alias(libs.plugins.buf)
}

group = "io.appium.multiplatform"
version = "unspecified"

/**
 * Kotlin doesn't currently support sharing a source set for JVM + Android targets
 */
kotlin {
    jvm() // at least one Kotlin target
    compilerOptions {
        extraWarnings.set(true)
        optIn.add("kotlin.time.ExperimentalTime")
        optIn.add("kotlin.uuid.ExperimentalUuidApi")
        freeCompilerArgs.add("-Xexpect-actual-classes")
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation(project.dependencies.enforcedPlatform(projects.platform))
                api(kotlin("reflect"))
                api(libs.bundles.ktor.shared)
                api(libs.kotlin.logging)
                api(libs.ktx.datetime)
                api(libs.ktx.serialization.json)
                api(libs.cache4k)
                implementation(libs.wire.runtime) // 暂时先不用wire
            }
        }
        commonTest {
            dependencies {
                implementation(libs.kotest.framework.engine)
                implementation(libs.kotest.runner.junit5)
                implementation(libs.kotest.assertions.core)
            }
        }
        // Code that can be shared between the parent modules `server` and `client`.
        // Code that can also be shared inside the `server` module between `androidMain`
        // (note: you need to manually add the dependency again) and `jvmMain`.
        jvmMain {
//            java.srcDirs(layout.buildDirectory.file("$BUF_BUILD_DIR/$GENERATED_DIR/java"))
            kotlin.srcDir(layout.buildDirectory.file("$BUF_BUILD_DIR/$GENERATED_DIR/kotlin"))
            dependencies {
                api(libs.slf4j.simple)
                api(libs.protobuf.kotlin)
                api(libs.protobuf.java.util)
                api(libs.bundles.protovalidate)
            }
        }
    }
}
configurations.all {
    exclude(
        group = "com.google.code.findbugs",
        module = "annotations"
    ) // Duplicate class javax.annotation.CheckForNull with jsr305
    exclude(
        group = "org.jetbrains.kotlinx",
        module = "atomicfu"
    )
}
/**
 * Buf supports code generation, linting, and formatting.
 *
 * In theory, the binary output generated by other cross-platform Protobuf implementations
 * like Wire or pbandk should be consistent.
 *
 * I'm not satisfied with how Wire handles oneOf, and its ecosystem is not fully mature:
 * some libraries are outdated or still experimental. It also doesn't support Python or Node.js.
 */
buf {
    // configFileLocation = rootProject.file("buf.yaml")
    publishSchema = false
    enforceFormat = true
    build {
        imageFormat = ImageFormat.JSON
    }
    generate {
        includeImports = false
    }
}
sourceSets {
    named("jvmMain") {
        // https://github.com/bufbuild/buf-gradle-plugin/issues/190
        java.srcDir(layout.buildDirectory.file("$BUF_BUILD_DIR/$GENERATED_DIR/java"))
    }
}
tasks.withType<Test>().configureEach {
    useJUnitPlatform()
    systemProperties(
        mapOf(
            "kotest.framework.dump.config" to true,
            "kotest.framework.config.fqn" to "io.appium.multiplatform.ProjectConfig",
        )
    )
}
val generateTasks = tasks.withType<GenerateTask>()

tasks.withType<KotlinCompile>().configureEach {
    dependsOn(generateTasks)
}

tasks.withType<JavaCompile>().configureEach {
    dependsOn(generateTasks)
}